apply plugin: 'com.android.application'
import com.android.build.gradle.api.ApplicationVariant
import groovy.xml.XmlUtil

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.1"
    defaultConfig {
        applicationId "com.charles.plugin.gradledemo"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
    testCompile 'junit:junit:4.12'
}

//动态向AndroidManifest.xml中 添加渠道号
project.afterEvaluate {
    android.applicationVariants.each{ ApplicationVariant variants ->
        def name = variants.name;
        def variantsName = name.capitalize();
        println "nam == ${name}"
        println "capitalizeName == ${variantsName}"
        def mergeManifestTask = project.tasks.getByName("process${variantsName}Manifest")
        println "mergeManifestTask == ${mergeManifestTask}"
        mergeManifestTask.doLast { mm ->
            def manifest = mm.manifestOutputFile
            println "manifest == ${manifest}"
            if(project.hasProperty("channel")){
                addChannel(manifest);
            }
        }
    }
}

def addChannel(File manifest){
    def channelNo = project.property("channel")
    println "channelNo == ${channelNo}"
    def parse = new XmlParser().parse(manifest);
    println "object == ${parse.application[0]}"
    parse.application[0].appendNode("meta-data",['android:name':'channel','android:value':channelNo])
    manifest.withPrintWriter("UTF-8"){
        XmlUtil.serialize(parse,it)
    }
}


//（1）调用Project的task()方法创建Task,
//doLast还有一个等价的操作leftShift，leftShift还可以缩写为<<，因此下面的三种实现效果等价：


// 定义并配置myTask
task myTask1 {
    println "config myTask1"
}

myTask1.doFirst {
    println "before execute myTask"
}

myTask1.doLast{
    println "after execute myTask"
}

task helloWord << {
    println 'Hello World! Charles'
}

helloWord .leftShift {
    println 'Hello World! Charles--left'
}

task hello2 {
    doLast {
        println 'hello2'}
}

task hello3 {
    doFirst {
        println 'hello3'}
}

task showTasks {
    println tasks.class
    println tasks.size()
}

/*
    (2)通过TaskContainer的create()方法创建Task
　　在上文中我们讲到，通过task()方法创建的Task都被存放在了TaskContainer中，
    而Project又维护了一个TaskContainer类型的属性tasks，那么我们完全可以直接向TaskContainer里面添加Task。
    查查TaskContainer的API文档可以发现，TaskContainer向我们提供了大量重载的create()方法用于添加Task。*/
tasks.create(name:'hello4') <<{
    println 'hello4'
}

/*
    (3)声明Task之间的依赖关系
　　Task之间是可以存在依赖关系，比如TaskA依赖TaskB，那么在执行TaskA时，
    Gradle会先执行TaskB，再执行TaskA。我们可以在定义一个Task的同时声明它的依赖关系：*/

task hello5(dependsOn:hello4) << {
    println 'hello5'
}

//当然，我们也可以在定义Task之后再声明依赖：
task hello6 << {
    println 'hello6'
}

hello6.dependsOn hello5

//(4)配置Task

task hello7 << {
    description = "this is hello7"
    println description
}

//我们还可以通过闭包的方式来配置一个已有的Task：
/*　需要注意的是，对hello8的description设置发生在创建该Task之后，
在执行“gradle hello8”时，命令行依然可以打印出正确的“this is hello8”，
这是因为Gradle在执行Task时分为两个阶段，首先是配置阶段，然后才是实际执行阶段。
所以在执行hello8之前，Gradle会扫描整个build.gradle文档，将hello8的description设置为“this is hello8”，
然后执行hello8，此时hello8的description已经包含了设置后的值。*/

task hello8 << {
    println description
}

hello8 {
    description = "this is hello8"
}

//我们还可以通过调用Task的configure()方法完成Property的设置：
task hello9 << {
    println description
}

hello9.configure {
    description = "this is hello9"
}

//Gradle 增量式构建 从sourceDir目录中读取所有的文件，然后将每个文件的内容合并到destination.txt文件中
task combineFileContentNonIncremental {
    def sources = fileTree('sourceDir')
    def destination = file('destination.txt')

    inputs.dir sources
    outputs.file destination

    doLast {
        destination.withPrintWriter { writer ->
            sources.each {source ->
                writer.println source.text
            }
        }
    }
}

//自定义task,然后上传到repository,

