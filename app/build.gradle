apply plugin: 'com.android.application'
import com.android.build.gradle.api.ApplicationVariant
import groovy.xml.XmlUtil

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.1"
    defaultConfig {
        applicationId "com.charles.plugin.gradledemo"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
    testCompile 'junit:junit:4.12'
}

//动态向AndroidManifest.xml中 添加渠道号
project.afterEvaluate {
    android.applicationVariants.each{ ApplicationVariant variants ->
        def name = variants.name;
        def variantsName = name.capitalize();
        println "nam == ${name}"
        println "capitalizeName == ${variantsName}"
        def mergeManifestTask = project.tasks.getByName("process${variantsName}Manifest")
        println "mergeManifestTask == ${mergeManifestTask}"
        mergeManifestTask.doLast { mm ->
            def manifest = mm.manifestOutputFile
            println "manifest == ${manifest}"
            if(project.hasProperty("channel")){
                addChannel(manifest);
            }
        }
    }
}

def addChannel(File manifest){
    def channelNo = project.property("channel")
    println "channelNo == ${channelNo}"
    def parse = new XmlParser().parse(manifest);
    println "object == ${parse.application[0]}"
    parse.application[0].appendNode("meta-data",['android:name':'channel','android:value':channelNo])
    manifest.withPrintWriter("UTF-8"){
        XmlUtil.serialize(parse,it)
    }
}


//Gradle 增量式构建 从sourceDir目录中读取所有的文件，然后将每个文件的内容合并到destination.txt文件中
task combineFileContentNonIncremental {
    def sources = fileTree('sourceDir')
    def destination = file('destination.txt')

    inputs.dir sources
    outputs.file destination

    doLast {
        destination.withPrintWriter { writer ->
            sources.each {source ->
                writer.println source.text
            }
        }
    }
}

//自定义task,然后上传到repository,

